//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BarnClient.BarnService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ObservationRecord", Namespace="http://schemas.datacontract.org/2004/07/BarnServer")]
    [System.SerializableAttribute()]
    public partial struct ObservationRecord : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BarnService.IBarnService", CallbackContract=typeof(BarnClient.BarnService.IBarnServiceCallback))]
    public interface IBarnService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarnService/GetRecords", ReplyAction="http://tempuri.org/IBarnService/GetRecordsResponse")]
        BarnClient.BarnService.ObservationRecord[] GetRecords(System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBarnService/GetRecords", ReplyAction="http://tempuri.org/IBarnService/GetRecordsResponse")]
        System.Threading.Tasks.Task<BarnClient.BarnService.ObservationRecord[]> GetRecordsAsync(System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBarnService/StartMonitoring")]
        void StartMonitoring();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBarnService/StartMonitoring")]
        System.Threading.Tasks.Task StartMonitoringAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBarnService/StopMonitoring")]
        void StopMonitoring();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBarnService/StopMonitoring")]
        System.Threading.Tasks.Task StopMonitoringAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBarnServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBarnService/PushObservation")]
        void PushObservation(BarnClient.BarnService.ObservationRecord record);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBarnServiceChannel : BarnClient.BarnService.IBarnService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BarnServiceClient : System.ServiceModel.DuplexClientBase<BarnClient.BarnService.IBarnService>, BarnClient.BarnService.IBarnService {
        
        public BarnServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BarnServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BarnServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BarnServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BarnServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public BarnClient.BarnService.ObservationRecord[] GetRecords(System.DateTime from, System.DateTime to) {
            return base.Channel.GetRecords(from, to);
        }
        
        public System.Threading.Tasks.Task<BarnClient.BarnService.ObservationRecord[]> GetRecordsAsync(System.DateTime from, System.DateTime to) {
            return base.Channel.GetRecordsAsync(from, to);
        }
        
        public void StartMonitoring() {
            base.Channel.StartMonitoring();
        }
        
        public System.Threading.Tasks.Task StartMonitoringAsync() {
            return base.Channel.StartMonitoringAsync();
        }
        
        public void StopMonitoring() {
            base.Channel.StopMonitoring();
        }
        
        public System.Threading.Tasks.Task StopMonitoringAsync() {
            return base.Channel.StopMonitoringAsync();
        }
    }
}
